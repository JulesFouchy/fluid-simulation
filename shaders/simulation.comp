//? #version 430

//? uniform int NumberOfComputationsX;
//? uniform int NumberOfComputationsY;
//? uniform int NumberOfComputationsZ;

uniform bool u_bFlipFlop;

layout(std430, binding=0) buffer myBuffer0 {
   float data0[];
};

layout(std430, binding=1) buffer myBuffer1 {
   float data1[];
};

float sampleGrid(int x, int y) {
    x += int(gl_GlobalInvocationID.x);
    y += int(gl_GlobalInvocationID.y);
    if (x < 0 || x >= NumberOfComputationsX ||
        y < 0 || y >= NumberOfComputationsY)
    {
       return 0;
    }
    return u_bFlipFlop 
        ? data1[x + y * NumberOfComputationsX]
        : data0[x + y * NumberOfComputationsX];
}

void setGrid(float value) {
    int x = int(gl_GlobalInvocationID.x);
    int y = int(gl_GlobalInvocationID.y);
    if (u_bFlipFlop)
        data0[x + y * NumberOfComputationsX] = value;
    else
        data1[x + y * NumberOfComputationsX] = value;
}

void density_diffusion() {
    float d0 = sampleGrid(0, 0);
    float d1 = sampleGrid(+1, 0);
    float d2 = sampleGrid(-1, 0);
    float d3 = sampleGrid(0, +1);
    float d4 = sampleGrid(0, -1);
}

void cool_main() {
    density_diffusion();
}