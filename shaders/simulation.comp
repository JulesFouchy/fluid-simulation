//? #version 430

//? uniform int NumberOfComputationsX;
//? uniform int NumberOfComputationsY;
//? uniform int NumberOfComputationsZ;

uniform bool u_bFlipFlop;

layout(std430, binding=0) buffer myBuffer0 {
   int data0[];
};

layout(std430, binding=1) buffer myBuffer1 {
   int data1[];
};

int sampleGrid(int x, int y) {
    if (x < 0 || x >= NumberOfComputationsX ||
        y < 0 || y >= NumberOfComputationsY)
    {
       return 0;
    }
    return u_bFlipFlop 
        ? data1[x + y * NumberOfComputationsX]
        : data0[x + y * NumberOfComputationsX];
}

void setGrid(int x, int y, int value) {
    if (u_bFlipFlop)
        data0[x + y * NumberOfComputationsX] = value;
    else
        data1[x + y * NumberOfComputationsX] = value;
}

void cool_main() {
    int idX = int(gl_GlobalInvocationID.x);
    int idY = int(gl_GlobalInvocationID.y);
    int nbAliveNeighbours =
        sampleGrid(idX + 1, idY + 1) +
        sampleGrid(idX + 1, idY + 0) +
        sampleGrid(idX + 1, idY - 1) +
        sampleGrid(idX + 0, idY + 1) +
        sampleGrid(idX + 0, idY - 1) +
        sampleGrid(idX - 1, idY + 1) +
        sampleGrid(idX - 1, idY + 0) +
        sampleGrid(idX - 1, idY - 1);
    int state = sampleGrid(idX, idY);

    if (state == 0) {
        // Dead
        if (nbAliveNeighbours == 3)
            setGrid(idX, idY, 1);
        else {
            setGrid(idX, idY, 0);
        }
    }
    else {
        // Alive
        if (nbAliveNeighbours == 2 || nbAliveNeighbours == 3)
            setGrid(idX, idY, 1);
        else {
            setGrid(idX, idY, 0);
        }
    }
}